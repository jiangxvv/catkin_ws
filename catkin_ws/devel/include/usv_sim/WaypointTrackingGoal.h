// Generated by gencpp from file usv_sim/WaypointTrackingGoal.msg
// DO NOT EDIT!


#ifndef USV_SIM_MESSAGE_WAYPOINTTRACKINGGOAL_H
#define USV_SIM_MESSAGE_WAYPOINTTRACKINGGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace usv_sim
{
template <class ContainerAllocator>
struct WaypointTrackingGoal_
{
  typedef WaypointTrackingGoal_<ContainerAllocator> Type;

  WaypointTrackingGoal_()
    : pos_x()
    , pos_y()
    , heading()
    , mission_type(false)
    , mission_duration(0.0)  {
    }
  WaypointTrackingGoal_(const ContainerAllocator& _alloc)
    : pos_x(_alloc)
    , pos_y(_alloc)
    , heading(_alloc)
    , mission_type(false)
    , mission_duration(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _pos_x_type;
  _pos_x_type pos_x;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _pos_y_type;
  _pos_y_type pos_y;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _heading_type;
  _heading_type heading;

   typedef uint8_t _mission_type_type;
  _mission_type_type mission_type;

   typedef double _mission_duration_type;
  _mission_duration_type mission_duration;





  typedef boost::shared_ptr< ::usv_sim::WaypointTrackingGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::usv_sim::WaypointTrackingGoal_<ContainerAllocator> const> ConstPtr;

}; // struct WaypointTrackingGoal_

typedef ::usv_sim::WaypointTrackingGoal_<std::allocator<void> > WaypointTrackingGoal;

typedef boost::shared_ptr< ::usv_sim::WaypointTrackingGoal > WaypointTrackingGoalPtr;
typedef boost::shared_ptr< ::usv_sim::WaypointTrackingGoal const> WaypointTrackingGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::usv_sim::WaypointTrackingGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::usv_sim::WaypointTrackingGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace usv_sim

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'usv_sim': ['/home/jiangxvv/catkin_ws/src/catkin_ws/src/bobli1987-autonomous_tugboat-a80163bcc2ef/usv_sim/msg', '/home/jiangxvv/catkin_ws/devel/share/usv_sim/msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'visualization_msgs': ['/opt/ros/kinetic/share/visualization_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::usv_sim::WaypointTrackingGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::usv_sim::WaypointTrackingGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::usv_sim::WaypointTrackingGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::usv_sim::WaypointTrackingGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::usv_sim::WaypointTrackingGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::usv_sim::WaypointTrackingGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::usv_sim::WaypointTrackingGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ec2419d2a0aec459c39bee2c36ebd66";
  }

  static const char* value(const ::usv_sim::WaypointTrackingGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ec2419d2a0aec45ULL;
  static const uint64_t static_value2 = 0x9c39bee2c36ebd66ULL;
};

template<class ContainerAllocator>
struct DataType< ::usv_sim::WaypointTrackingGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "usv_sim/WaypointTrackingGoal";
  }

  static const char* value(const ::usv_sim::WaypointTrackingGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::usv_sim::WaypointTrackingGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# goal definition\n\
float64[] pos_x\n\
float64[] pos_y\n\
float64[] heading\n\
bool mission_type\n\
float64 mission_duration\n\
";
  }

  static const char* value(const ::usv_sim::WaypointTrackingGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::usv_sim::WaypointTrackingGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos_x);
      stream.next(m.pos_y);
      stream.next(m.heading);
      stream.next(m.mission_type);
      stream.next(m.mission_duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WaypointTrackingGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::usv_sim::WaypointTrackingGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::usv_sim::WaypointTrackingGoal_<ContainerAllocator>& v)
  {
    s << indent << "pos_x[]" << std::endl;
    for (size_t i = 0; i < v.pos_x.size(); ++i)
    {
      s << indent << "  pos_x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pos_x[i]);
    }
    s << indent << "pos_y[]" << std::endl;
    for (size_t i = 0; i < v.pos_y.size(); ++i)
    {
      s << indent << "  pos_y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pos_y[i]);
    }
    s << indent << "heading[]" << std::endl;
    for (size_t i = 0; i < v.heading.size(); ++i)
    {
      s << indent << "  heading[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.heading[i]);
    }
    s << indent << "mission_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mission_type);
    s << indent << "mission_duration: ";
    Printer<double>::stream(s, indent + "  ", v.mission_duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // USV_SIM_MESSAGE_WAYPOINTTRACKINGGOAL_H
